
import sys
from uuid import uuid4
from datetime import datetime, timezone
import pytest
from pydantic import parse_obj_as
from fastapi.testclient import TestClient

from fairgraph.client_v3 import KGv3Client as KGClient
import fairgraph.openminds.core as omcore
import fairgraph.openminds.controlledterms as omterms
import fairgraph.openminds.computation as omcmp
from fairgraph.base_v3 import IRI

sys.path.append(".")  # run tests in root directory of project
from provenance.main import app

ID_PREFIX = "https://kg.ebrains.eu/api/instances"
TEST_SPACE = "collab-provenance-api-development"
#TEST_SPACE = "collab-ebrains-workflows"

test_client = TestClient(app)

kg_client = KGClient(host="core.kg-ppd.ebrains.eu")  # don't use production for testing
if kg_client.user_info():
    have_kg_connection = True
else:
    have_kg_connection = False


no_kg_err_msg = "No KG connection - have you set the environment variable KG_AUTH_TOKEN?"



omcore.SoftwareVersion.set_strict_mode(False)
omcore.ParameterSet.set_strict_mode(False, "context")


@pytest.fixture(scope="module")
def units():
    return {
        item.name: item
        for item in omterms.UnitOfMeasurement.list(kg_client, api="core", size=1000, scope="in progress")
    }



@pytest.fixture(scope="module")
def person_obj():
    obj = omcore.Person(
        id=f"{ID_PREFIX}/{uuid4()}",
        family_name="Davison",
        given_name="Andrew",
        digital_identifiers=[
            omcore.ORCID(
                id=f"{ID_PREFIX}/{uuid4()}",
                identifier="http://orcid.org/0000-0002-4793-7541"
            )
        ]
    )
    obj.save(kg_client, space=TEST_SPACE, recursive=True)
    yield obj
    obj.delete(kg_client)


@pytest.fixture(scope="module")
def input_file_obj(units):
    obj = omcore.File(
        id=f"{ID_PREFIX}/{uuid4()}",
        content="Demonstration data for validation framework",
        format=omcore.ContentType(name="application/json"),
        hash=omcore.Hash(algorithm="SHA-1", digest="716c29320b1e329196ce15d904f7d4e3c7c46685"),
        iri=IRI("https://object.cscs.ch/v1/AUTH_c0a333ecf7c045809321ce9d9ecdfdea/VF_paper_demo/obs_data/InputResistance_data.json"),
        name="InputResistance_data.json",
        storage_size=omcore.QuantitativeValue(value=34.0, units=units["byte"])
    )
    obj.save(kg_client, space=TEST_SPACE, recursive=True)
    yield obj
    obj.delete(kg_client)


@pytest.fixture(scope="module")
def output_file_obj(units):
    obj = omcore.File(
        id=f"{ID_PREFIX}/{uuid4()}",
        content="File generated by some computation",
        format=omcore.ContentType(name="image/png"),
        hash=omcore.Hash(algorithm="SHA-1", digest="9006f7ca30ee32d210249ba125dfd96d18b6669e"),
        iri=IRI("https://drive.ebrains.eu/f/61ceb5c4aa3c4468a26c/"),
        name="output_files/Freund_SGA1_T1.2.5_HC-awake-ephys_HBP_1_cell1_ephys__160712_cell1_LFP.png",
        storage_size=omcore.QuantitativeValue(value=60715.0, units=units["byte"])
    )
    obj.save(kg_client, space=TEST_SPACE, recursive=True)
    yield obj
    obj.delete(kg_client)


@pytest.fixture(scope="module")
def software_version_objs():
    objs = [
        omcore.SoftwareVersion(id=f"{ID_PREFIX}/{uuid4()}", name="Elephant", alias="Elephant", version_identifier="0.10.0"),
        omcore.SoftwareVersion(id=f"{ID_PREFIX}/{uuid4()}", name="numpy", alias="numpy", version_identifier="1.19.3"),
        omcore.SoftwareVersion(id=f"{ID_PREFIX}/{uuid4()}", name="neo", alias="neo", version_identifier="0.9.0"),
        omcore.SoftwareVersion(id=f"{ID_PREFIX}/{uuid4()}", name="spyNNaker", alias="spyNNaker", version_identifier="5.0.0")
    ]
    for obj in objs:
        obj.save(kg_client, space=TEST_SPACE)
    yield objs
    for obj in objs:
        obj.delete(kg_client)


@pytest.fixture(scope="module")
def hardware_obj():
    obj = omcmp.HardwareSystem(id=f"{ID_PREFIX}/{uuid4()}", name="Top500Number1", version="1")
    obj.save(kg_client, space=TEST_SPACE)
    yield obj
    obj.delete(kg_client)


@pytest.fixture(scope="module")
def environment_obj(software_version_objs, hardware_obj):
    obj = omcmp.Environment(
        id=f"{ID_PREFIX}/{uuid4()}",
        name="Some hardware that doesn't really exist",
        hardware=hardware_obj,
        configuration=omcore.ParameterSet(
                parameters=[
                    omcore.StringParameter(name="parameter1", value="value1"),
                    omcore.StringParameter(name="parameter2", value="value2")
                ],
                context="hardware configuration for fake hardware"
        ),
        software=software_version_objs[1:],
        description="Default environment on fake hardware"

    )
    obj.save(kg_client, space=TEST_SPACE, recursive=True)
    yield obj
    obj.delete(kg_client)


@pytest.fixture(scope="module")
def launch_config_obj(software_version_objs):
    obj = omcmp.LaunchConfiguration(
        id=f"{ID_PREFIX}/{uuid4()}",
        executable="/usr/bin/python",
        name="dummy launch config",
        arguments=["-Werror"],
        environment_variables=omcore.ParameterSet(
            parameters=[omcore.StringParameter(name="COLLAB_ID", value= "myspace")]
        )
    )
    obj.save(kg_client, space=TEST_SPACE)
    yield obj
    obj.delete(kg_client)


@pytest.fixture(scope="module")
def data_analysis_obj(person_obj, input_file_obj, output_file_obj, software_version_objs,
                      environment_obj, launch_config_obj, units):
    # pydantic_obj = parse_obj_as(DataAnalysis, EXAMPLES["DataAnalysis"])
    # pydantic_obj.id = uuid4()
    # kg_object = pydantic_obj.to_kg_object(kg_client)
    # kg_object.save(kg_client, space=TEST_SPACE, recursive=True)
    resource_usage = [omcore.QuantitativeValue(value=1017.3,
                                               unit=units["hour"])]
    obj = omcmp.DataAnalysis(
        id=f"{ID_PREFIX}/{uuid4()}",
        inputs=[input_file_obj, software_version_objs[0]],
        outputs=[output_file_obj],
        environment=environment_obj,
        launch_configuration=launch_config_obj,
        started_at_time=datetime(2021, 5, 28, 16, 32, 58, 597000, tzinfo=timezone.utc),
        ended_at_time=datetime(2021, 5, 28, 16, 32, 58,  597000, tzinfo=timezone.utc),
        started_by=person_obj,
        status=omterms.ActionStatusType(name="queued"),
        resource_usages=resource_usage,
        tags=["string"]
    )
    obj.save(kg_client, space=TEST_SPACE, recursive=True)
    yield obj
    # teardown
    obj.delete(kg_client)


@pytest.mark.skipif(not have_kg_connection, reason=no_kg_err_msg)
def test_about():
    response = test_client.get("/")
    assert response.status_code == 200
    expected = {
        'about': 'This is the EBRAINS Provenance API.',
        'links': {'documentation': '/docs'}
    }
    assert response.json() == expected


@pytest.mark.skipif(not have_kg_connection, reason=no_kg_err_msg)
def test_create_data_analysis(data_analysis_obj):
    pass
